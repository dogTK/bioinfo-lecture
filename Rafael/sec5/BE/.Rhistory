install.packages("dplyr")
install.packages("Seurat") # Docker imageを使ってる方はv5がインストールされるためスキップ推奨
install.packages("devtools")
devtools::install_github("satijalab/seurat", ref = "tags/v4.3.0")
devtools::install_github("satijalab/seurat", ref = "tags/v4.3.0")
setwd("C:/R")
library(Seurat)
library(SeuratData)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
a
library(SeuratData)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
library(Seurat)
library(SeuratData)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("satijalab/seurat-data")
library(SeuratData)
library(Seurat)
library(patchwork)
# install dataset
InstallData("ifnb")
print("hello")
library(SeuratData)
library(Seurat)
library(patchwork)
# install dataset
InstallData("ifnb")
download.file("http://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.1.0.tar.gz", destfile = "ifnb.SeuratData_3.1.0.tar.gz")
install.packages("ifnb.SeuratData_3.1.0.tar.gz", repos = NULL, type = "source")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
file.rename(~, ~\sec5)
file.rename(from=~,to=~\sec5)
file.rename(from = "~/ifnb.SeuratData_3.1.0.tar.gz", to = "~/sec5/ifnb.SeuratData_3.1.0.tar.gz")
getwd()
setwd("C:/R")
file.rename(from = "~/ifnb.SeuratData_3.1.0.tar.gz", to = "~/sec5/ifnb.SeuratData_3.1.0.tar.gz")
setwd("C:/R/sec5/BE")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
library(Seurat)
library(SeuratData)
library(patchwork)
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# load dataset
LoadData("ifnb")
#installation problem
download.file("http://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.1.0.tar.gz", destfile = "ifnb.SeuratData_3.1.0.tar.gz")
# install dataset
InstallData("ifnb")
#installation problem
options(timeout=300)  # タイムアウトを300秒（5分）に設定
download.file("http://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.1.0.tar.gz", destfile = "ifnb.SeuratData_3.1.0.tar.gz")
install.packages("ifnb.SeuratData_3.1.0.tar.gz", repos = NULL, type = "source")
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
ifnb <- LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
ifnb
head(ifnb@meta.data)
head(ifnb@meta.data)
# Find integration ancher
immune.anchors <- FindIntegrationAnchors(
object.list = ifnb.list, anchor.features = features
)
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
# Find integration ancher
immune.anchors <- FindIntegrationAnchors(
object.list = ifnb.list, anchor.features = features
)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
head(ifnb@meta.data)
DefaultAssay(immune.combined) <- "integrated"
# Now you can use the pipe operator
immune.combined <- immune.combined %>%
ScaleData(verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.5)
library(magrittr)  # Load the magrittr package for the %>% operator
# Now you can use the pipe operator
immune.combined <- immune.combined %>%
ScaleData(verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.5)
# Now you can use the pipe operator
immune.combined <- immune.combined %>%
ScaleData(verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.5)
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
p1 <- DimPlot(ifnb, reduction = "umap", group.by = "stim")
p2 <- DimPlot(ifnb, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
# Visualization
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(immune.combined, reduction = "umap", label = TRUE, repel = TRUE)
p1 + p2
DimPlot(immune.combined, reduction = "umap", split.by = "stim")
immune.combined <- RenameIdents(immune.combined,
`0` = "CD14 Mono", `1` = "CD4 Naive T", `2` = "CD4 Memory T",
`3` = "CD16 Mono", `4` = "B", `5` = "CD8 T", `6` = "NK", `7` = "T activated",
`8` = "DC", `9` = "B Activated", `10` = "Mk", `11` = "pDC", `12` = "Eryth",
`13` = "Mono/Mk Doublets", `14` = "HSPC"
)
p1 <- DimPlot(immune.combined, reduction = "umap", group.by = "stim")
p2 <- DimPlot(
immune.combined,
reduction = "umap",
group.by = "seurat_annotations",
label = TRUE,
repel = TRUE
)
p1 + p2
Idents(immune.combined) <- factor(
Idents(immune.combined),
levels = c(
"HSPC", "Mono/Mk Doublets", "pDC", "Eryth", "Mk", "DC", "CD14 Mono",
"CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"
)
)
markers.to.plot <- c(
"CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7",
"CCL5", "CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1",
"CCL2", "S100A9", "HLA-DQA1", "GPR183", "PPBP", "GNG11", "HBA2", "HBB",
"TSPAN13", "IL3RA", "IGJ", "PRSS57"
)
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 8,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 4,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()+theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12))
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()+theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12))
immune.combined,
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
Idents(immune.combined) <- factor(
Idents(immune.combined),
levels = c(
"HSPC", "Mono/Mk Doublets", "pDC", "Eryth", "Mk", "DC", "CD14 Mono",
"CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"
)
)
markers.to.plot <- c(
"CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7",
"CCL5", "CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1",
"CCL2", "S100A9", "HLA-DQA1", "GPR183", "PPBP", "GNG11", "HBA2", "HBB",
"TSPAN13", "IL3RA", "IGJ", "PRSS57"
)
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
DotPlot(
immune.combined,
features = markers.to.plot,
cols = c("blue", "red"),
dot.scale = 3,
split.by = "stim"
) + RotatedAxis()
immune.combined <- RenameIdents(immune.combined,
`0` = "CD14 Mono", `1` = "CD4 Naive T", `2` = "CD4 Memory T",
`3` = "CD16 Mono", `4` = "B", `5` = "CD8 T", `6` = "NK", `7` = "T activated",
`8` = "DC", `9` = "B Activated", `10` = "Mk", `11` = "pDC", `12` = "Eryth",
`13` = "Mono/Mk Doublets", `14` = "HSPC"
)
# Load visualization libraries
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
# Extract and process data for "CD4 Naive T" cells
t.cells <- subset(immune.combined, idents = "CD4 Naive T")
Idents(t.cells) <- "stim"
avg.t.cells <- as.data.frame(
log1p(AverageExpression(t.cells, verbose = FALSE)$RNA)
)
avg.t.cells$gene <- rownames(avg.t.cells)
# Extract and process data for "CD14 Mono" cells
cd14.mono <- subset(immune.combined, idents = "CD14 Mono")
Idents(cd14.mono) <- "stim"
avg.cd14.mono <- as.data.frame(
log1p(AverageExpression(cd14.mono, verbose = FALSE)$RNA)
)
avg.cd14.mono$gene <- rownames(avg.cd14.mono)
# Specify genes to be highlighted in plots
genes.to.label <- c(
"ISG15", "LY6E", "IFI6", "ISG20", "MX1", "IFIT2", "IFIT1", "CXCL10", "CCL8"
)
# Create scatter plots and label specified genes
p1 <- ggplot(avg.t.cells, aes(CTRL, STIM)) +
geom_point() +
ggtitle("CD4 Naive T Cells")
p1 <- LabelPoints(plot = p1, points = genes.to.label, repel = TRUE)
p2 <- ggplot(avg.cd14.mono, aes(CTRL, STIM)) +
geom_point() +
ggtitle("CD14 Monocytes")
p2 <- LabelPoints(plot = p2, points = genes.to.label, repel = TRUE)
# Display plots side by side
p1 + p2
