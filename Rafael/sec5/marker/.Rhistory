install.packages("dplyr")
install.packages("Seurat") # Docker imageを使ってる方はv5がインストールされるためスキップ推奨
install.packages("devtools")
devtools::install_github("satijalab/seurat", ref = "tags/v4.3.0")
devtools::install_github("satijalab/seurat", ref = "tags/v4.3.0")
setwd("C:/R")
library(Seurat)
library(SeuratData)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
a
library(SeuratData)
remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
library(Seurat)
library(SeuratData)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("satijalab/seurat-data")
library(SeuratData)
library(Seurat)
library(patchwork)
# install dataset
InstallData("ifnb")
print("hello")
library(SeuratData)
library(Seurat)
library(patchwork)
# install dataset
InstallData("ifnb")
download.file("http://seurat.nygenome.org/src/contrib/ifnb.SeuratData_3.1.0.tar.gz", destfile = "ifnb.SeuratData_3.1.0.tar.gz")
install.packages("ifnb.SeuratData_3.1.0.tar.gz", repos = NULL, type = "source")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
file.rename(~, ~\sec5)
file.rename(from=~,to=~\sec5)
file.rename(from = "~/ifnb.SeuratData_3.1.0.tar.gz", to = "~/sec5/ifnb.SeuratData_3.1.0.tar.gz")
getwd()
setwd("C:/R")
file.rename(from = "~/ifnb.SeuratData_3.1.0.tar.gz", to = "~/sec5/ifnb.SeuratData_3.1.0.tar.gz")
library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
packageVersion("Seurat")
library(SeuratData)
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
setwd("C:/R/sec5/marker")
library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# install dataset if not already installed
if (!"ifnb" %in% installed.packages()) {
InstallData("ifnb")
}
# load dataset
ifnb <- LoadData("ifnb")
# Check the structure of the Seurat object to ensure the proper slots exist
str(ifnb)
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# Check the structure of the split objects
str(ifnb.list)
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
# Find integration ancher
immune.anchors <- FindIntegrationAnchors(
object.list = ifnb.list, anchor.features = features
)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
DefaultAssay(immune.combined) <- "integrated"
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 5,
ident.2 = c(0, 3),
min.pct = 0.25
)
head(cluster5.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 4,
ident.2 = c(0, 3),
min.pct = 0.25
)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 1,
ident.2 = c(0, 3),
min.pct = 0.25
)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 2,
ident.2 = c(0, 3),
min.pct = 0.25
)
# クラスタIDの確認
Idents(immune.combined)
library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
ifnb <- LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
head(ifnb@meta.data)
# Find integration ancher
immune.anchors <- FindIntegrationAnchors(
object.list = ifnb.list, anchor.features = features
)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
head(ifnb@meta.data)
DefaultAssay(immune.combined) <- "integrated"
library(magrittr)  # Load the magrittr package for the %>% operator
# Now you can use the pipe operator
immune.combined <- immune.combined %>%
ScaleData(verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.5)
immune.combined <- RenameIdents(immune.combined,
`0` = "CD14 Mono", `1` = "CD4 Naive T", `2` = "CD4 Memory T",
`3` = "CD16 Mono", `4` = "B", `5` = "CD8 T", `6` = "NK", `7` = "T activated",
`8` = "DC", `9` = "B Activated", `10` = "Mk", `11` = "pDC", `12` = "Eryth",
`13` = "Mono/Mk Doublets", `14` = "HSPC"
)
Idents(immune.combined) <- factor(
Idents(immune.combined),
levels = c(
"HSPC", "Mono/Mk Doublets", "pDC", "Eryth", "Mk", "DC", "CD14 Mono",
"CD16 Mono", "B Activated", "B", "CD8 T", "NK", "T activated",
"CD4 Naive T", "CD4 Memory T"
)
)
markers.to.plot <- c(
"CD3D", "CREM", "HSPH1", "SELL", "GIMAP5", "CACYBP", "GNLY", "NKG7",
"CCL5", "CD8A", "MS4A1", "CD79A", "MIR155HG", "NME1", "FCGR3A", "VMO1",
"CCL2", "S100A9", "HLA-DQA1", "GPR183", "PPBP", "GNG11", "HBA2", "HBB",
"TSPAN13", "IL3RA", "IGJ", "PRSS57"
)
# Load visualization libraries
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
# Extract and process data for "CD4 Naive T" cells
t.cells <- subset(immune.combined, idents = "CD4 Naive T")
Idents(t.cells) <- "stim"
avg.t.cells <- as.data.frame(
log1p(AverageExpression(t.cells, verbose = FALSE)$RNA)
)
avg.t.cells$gene <- rownames(avg.t.cells)
# Extract and process data for "CD14 Mono" cells
cd14.mono <- subset(immune.combined, idents = "CD14 Mono")
Idents(cd14.mono) <- "stim"
avg.cd14.mono <- as.data.frame(
log1p(AverageExpression(cd14.mono, verbose = FALSE)$RNA)
)
avg.cd14.mono$gene <- rownames(avg.cd14.mono)
# Specify genes to be highlighted in plots
genes.to.label <- c(
"ISG15", "LY6E", "IFI6", "ISG20", "MX1", "IFIT2", "IFIT1", "CXCL10", "CCL8"
)
# Create a new identifier combining cell type and stimulation status
immune.combined$celltype.stim <- paste(
Idents(immune.combined),
immune.combined$stim,
sep = "_"
)
# Backup current cell type identifiers and update to the new combined identifier
immune.combined$celltype <- Idents(immune.combined)
Idents(immune.combined) <- "celltype.stim"
# Identify genes differentially expressed between stimulated and control B cells
b.interferon.response <- FindMarkers(
immune.combined,
ident.1 = "B_STIM",
ident.2 = "B_CTRL",
verbose = FALSE
)
# Visualize expression of selected genes split by stimulation status
FeaturePlot(
immune.combined,
features = c("CD3D", "GNLY", "IFI6"),
split.by = "stim",
max.cutoff = 3,
cols = c("grey", "red")
)
# Generate violin plots for specified genes, separated by stimulation status and grouped by cell type
plots <- VlnPlot(
immune.combined,
features = c("LYZ", "ISG15", "CXCL10"),
split.by = "stim",
group.by = "celltype",
pt.size = 0,
combine = TRUE
)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 2,
ident.2 = c(0, 3),
min.pct = 0.25
)
# クラスターIDを元の数値に戻す
immune.combined <- RenameIdents(immune.combined,
`CD14 Mono` = "0", `CD4 Naive T` = "1", `CD4 Memory T` = "2",
`CD16 Mono` = "3", `B` = "4", `CD8 T` = "5", `NK` = "6", `T activated` = "7",
`DC` = "8", `B Activated` = "9", `Mk` = "10", `pDC` = "11", `Eryth` = "12",
`Mono/Mk Doublets` = "13", `HSPC` = "14"
)
library(Seurat)
library(SeuratData)
library(patchwork)
# install dataset
InstallData("ifnb")
# load dataset
LoadData("ifnb")
# split the dataset into a list of two seurat objects (stim and CTRL)
ifnb.list <- SplitObject(ifnb, split.by = "stim")
# normalize and identify variable features for each dataset independently
ifnb.list <- lapply(X = ifnb.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = ifnb.list)
# Find integration ancher
immune.anchors <- FindIntegrationAnchors(
object.list = ifnb.list, anchor.features = features
)
# this command creates an 'integrated' data assay
immune.combined <- IntegrateData(anchorset = immune.anchors)
DefaultAssay(immune.combined) <- "integrated"
library(magrittr)  # Load the magrittr package for the %>% operator
# Now you can use the pipe operator
immune.combined <- immune.combined %>%
ScaleData(verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
immune.combined,
ident.1 = 5,
ident.2 = c(0, 3),
min.pct = 0.25
)
head(cluster5.markers, n = 5)
# トップの遺伝子を選択
top_genes <- head(row.names(cluster5.markers))
# バイオリンプロットを作成
VlnPlot(immune.combined, features = top_genes, group.by = "seurat_clusters")
# バイオリンプロットを作成
VlnPlot(immune.combined, features = top_genes, group.by = "seurat_clusters")
# トップの遺伝子を選択
top_genes <- head(row.names(cluster5.markers), n=5)
# ドットプロットを作成
DotPlot(immune.combined, features = top_genes, group.by = "seurat_clusters")
cluster0.markers <- FindMarkers(
immune.combined,
ident.1 = 0,
logfc.threshold = 0.25,
test.use = "roc",
only.pos = TRUE
)
head(cluster0.markers, n = 5)
VlnPlot(
immune.combined,
features = c("FTL", "CD63"),
pt.size = 0.1,
group.by = "seurat_clusters"
)
# Identify markers for every cluster compared to all remaining cells, report only the positive ones
cluster.markers <- FindAllMarkers(
immune.combined,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25
)
cluster.markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC) %>%
print(n = 28)
library(dplyr)
cluster.markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC) %>%
print(n = 28)
plots <- VlnPlot(
immune.combined,
features = c("CCL8"),
group.by = "seurat_clusters",
pt.size = 0.1,
combine = FALSE
)
plots
DotPlot(
immune.combined,
features = unique_marker_genes,
group.by = "seurat_clusters"
) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
marker_genes <- cluster.markers %>%
group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 2) %>%
pull(gene)
unique_marker_genes <- unique(marker_genes)
DotPlot(
immune.combined,
features = unique_marker_genes,
group.by = "seurat_clusters"
) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# For performing differential expression after integration, we switch back to the original
# data
DefaultAssay(immune.combined) <- "RNA"
cluster6.markers <- FindConservedMarkers(
immune.combined,
ident.1 = 6,
grouping.var = "stim"
)
# multtestパッケージをインストール
BiocManager::install('multtest')
# metapパッケージをインストール
install.packages('metap')
cluster6.markers <- FindConservedMarkers(
immune.combined,
ident.1 = 6,
grouping.var = "stim"
)
cluster0.markers <- FindMarkers(
immune.combined,
ident.1 = 0,
logfc.threshold = 0.25,
test.use = "roc",
only.pos = TRUE
)
# Identify markers for every cluster compared to all remaining cells, report only the positive ones
cluster.markers <- FindAllMarkers(
immune.combined,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25
)
library(dplyr)
cluster.markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC) %>%
print(n = 28)
plots <- VlnPlot(
immune.combined,
features = c("CCL8"),
group.by = "seurat_clusters",
pt.size = 0.1,
combine = FALSE
)
marker_genes <- cluster.markers %>%
group_by(cluster) %>%
slice_max(order_by = avg_log2FC, n = 2) %>%
pull(gene)
unique_marker_genes <- unique(marker_genes)
DotPlot(
immune.combined,
features = unique_marker_genes,
group.by = "seurat_clusters"
) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# For performing differential expression after integration, we switch back to the original
# data
DefaultAssay(immune.combined) <- "RNA"
cluster6.markers <- FindConservedMarkers(
immune.combined,
ident.1 = 6,
grouping.var = "stim"
)
head(cluster6.markers)
FeaturePlot(
immune.combined,
features = c(
"CD3D", "SELL", "CREM", "CD8A", "GNLY", "CD79A", "FCGR3A", "CCL2", "PPBP"
),
min.cutoff = "q9"
)
immune.combined <- RenameIdents(
immune.combined,
`0` = "CD14 Mono",
`1` = "CD4 Naive T",
`2` = "CD4 Memory T",
`3` = "CD16 Mono",
`4` = "B",
`5` = "CD8 T",
`6` = "NK",
`7` = "T activated",
`8` = "DC",
`9` = "B Activated",
`10` = "Mk",
`11` = "pDC",
`12` = "Eryth",
`13` = "Mono/Mk Doublets"
)
DimPlot(immune.combined, label = TRUE)
